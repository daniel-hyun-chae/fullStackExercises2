{"version":3,"sources":["services/persons.js","components/Filter.js","components/AddPerson.js","components/Person.js","components/Message.js","components/App.js","index.js"],"names":["baseUrl","exportModule","getAll","axios","get","then","res","data","create","newPerson","post","update","id","updatedPerson","put","remove","delete","Filter","newFilter","handleFilterChange","value","onChange","AddPerson","handleAddPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","Person","person","deletePerson","name","number","onClick","Notification","messageType","message","className","App","useState","persons","setPersons","setNewName","setNewNumber","setNewFilter","setMessage","setMessageType","personsToShow","filter","toLowerCase","includes","createMessage","setTimeout","useEffect","personService","initialPersons","Message","event","target","preventDefault","existingPerson","length","addedPerson","concat","catch","err","alert","window","confirm","map","personToDelete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eeaaaa98.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = \"/api/persons\"\r\nconst getAll = () => {\r\n    return axios.get(baseUrl)\r\n        .then(res => res.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nconst create = (newPerson) => {\r\n    return axios.post(baseUrl, newPerson).then(res => res.data)\r\n}\r\n\r\nconst update = (id, updatedPerson) => {\r\n    return axios.put(`${baseUrl}/${id}`, updatedPerson).then(res => res.data)\r\n}\r\n\r\nconst exportModule = { getAll, create, update, remove }\r\n\r\nexport default exportModule","import React from 'react'\r\n\r\nconst Filter = ({ newFilter, handleFilterChange }) => {\r\n    return (\r\n        <div>\r\n            filter shown with <input value={newFilter} onChange={handleFilterChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst AddPerson = ({ handleAddPerson, newName, handleNameChange, newNumber, handleNumberChange }) => {\r\n    return (\r\n        <form onSubmit={handleAddPerson}>\r\n            <div>\r\n                name: <input value={newName} onChange={handleNameChange} />\r\n            </div>\r\n            <div>\r\n                number: <input value={newNumber} onChange={handleNumberChange} />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddPerson","import React from 'react'\r\n\r\nconst Person = ({ person, deletePerson }) => {\r\n    return (\r\n        <li>{person.name} {person.number}<button onClick={deletePerson}>delete</button></li>\r\n    )\r\n}\r\n\r\nexport default Person","import React from 'react'\r\n\r\nconst Notification = ({ messageType, message }) => {\r\n\r\n    if (!message) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className={messageType}>{message}</div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport personService from '../services/persons'\n\nimport Filter from './Filter'\nimport AddPerson from './AddPerson'\nimport Person from './Person'\nimport Message from './Message'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n  const [message, setMessage] = useState('')\n  const [messageType, setMessageType] = useState('')\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  const personsToShow = newFilter === '' ? persons : persons.filter(person => person.name.toLowerCase().includes(newFilter.toLowerCase()))\n\n  const createMessage = (type, message) => {\n    setMessage(message)\n    setMessageType(type)\n    setTimeout(() => {\n      setMessage(null)\n    }, 3000)\n  }\n\n  const handleAddPerson = (event) => {\n    event.preventDefault()\n\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n\n    const existingPerson = persons.filter(person => person.name === newName)\n    if (existingPerson.length !== 0) {\n      const confirm = window.confirm(`${existingPerson[0].name} is already added to phonebook, replace the old number with a new one?`);\n      if (confirm) {\n        personService.update(existingPerson[0].id, newPerson)\n          .then((updatedPerson) => {\n            setPersons(persons.map(person => person.id === updatedPerson.id ? updatedPerson : person))\n\n            setNewName('')\n            setNewNumber('')\n            createMessage(\"notification\", `Updated ${updatedPerson.name}`)\n          })\n          .catch((err) => {\n            createMessage(\"error\", `Information of ${existingPerson[0].name} has already been removed from server`)\n          })\n      }\n      return\n    }\n\n    personService.create(newPerson)\n      .then(addedPerson => {\n        setPersons(persons.concat(addedPerson))\n        setNewName('')\n        setNewNumber('')\n        createMessage(\"notification\", `Created ${addedPerson.name}`)\n      }).catch((err) => {\n        alert(err)\n      })\n  }\n\n  const deletePerson = (personToDelete) => {\n    const confirm = window.confirm(`Delete ${personToDelete.name} ?`)\n    if (confirm) {\n      personService\n        .remove(personToDelete.id)\n        .then(setPersons(persons.filter(person => person.name !== personToDelete.name)))\n        .catch(err => {\n          createMessage(\"error\", `Information of ${personToDelete.name} has already been removed from server`)\n        })\n    }\n\n  }\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Message message={message} messageType={messageType} />\n      <Filter newFilter={newFilter} handleFilterChange={handleFilterChange} />\n      <h3>Add a new</h3>\n      <AddPerson handleAddPerson={handleAddPerson} newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange} />\n      <h3>Numbers</h3>\n      {personsToShow.map(person => <Person key={person.id} person={person} deletePerson={() => { deletePerson(person) }} />)}\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './components/App'\nimport './components/message.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}